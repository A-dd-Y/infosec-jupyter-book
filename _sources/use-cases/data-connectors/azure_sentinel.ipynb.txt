{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Azure Sentinel\n",
    "\n",
    "* **Author:** Roberto Rodriguez (@Cyb3rWard0g)\n",
    "* **Notes**: You can run this notebook from BinderHub! On the top right of your screen click on the rocket and then the BinderHub badge.\n",
    "* **References:**\n",
    "    * https://github.com/Azure/Azure-Sentinel-Notebooks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using MSTICpy\n",
    "\n",
    "Pre-requisites:\n",
    "\n",
    "* pip install pandas\n",
    "* pip install msticpy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "import pandas as pd\n",
    "from msticpy.nbtools.wsconfig import WorkspaceConfig\n",
    "from msticpy.data.data_providers import QueryProvider\n",
    "os.environ[\"KQLMAGIC_LOAD_MODE\"]=\"silent\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define Connection String\n",
    "We are going to authenticate to our demo workspace with an AppKey. Therefore, there is no need for you to pass an azure account or authenticate with your credentials! This is a great demo environment to test your notebooks!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "connect_str = f\"loganalytics://workspace='DEMO_WORKSPACE';appkey='DEMO_KEY';alias='myworkspace'\"\n",
    "qry_prov = QueryProvider(\"LogAnalytics\")\n",
    "qry_prov.connect(connect_str)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Native Kqlmagic interface\n",
    "See https://github.com/Microsoft/jupyter-Kqlmagic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%kql SecurityEvent | take 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### MSITCPy query interface"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "alerts_df = qry_prov.exec_query(\"\"\"\n",
    "SecurityAlert \n",
    "| take 10\n",
    "\"\"\")\n",
    "print(type(alerts_df))\n",
    "alerts_df.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Send queries of arbitrary complexity (using `%%kql` or `msticpy`)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "events_df = qry_prov.exec_query(\"\"\"\n",
    "SecurityEvent\n",
    "| where TimeGenerated between (ago(1d) .. now())\n",
    "| summarize EventCount=count() by EventID\n",
    "\"\"\")\n",
    "display(events_df.head(5))\n",
    "events_df.plot.bar(x=\"EventID\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Simple parameterization of queries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime, timedelta\n",
    "param_query = \"\"\"\n",
    "SecurityEvent\n",
    "| where TimeGenerated between (datetime({start}) .. datetime({end}))\n",
    "| summarize EventCount=count() by EventID\n",
    "\"\"\"\n",
    "\n",
    "end = datetime.utcnow()\n",
    "start = end - timedelta(3)\n",
    "\n",
    "events_df = qry_prov.exec_query(\n",
    "    param_query.format(start=start, end=end)\n",
    ")\n",
    "\n",
    "display(events_df.head(5))\n",
    "events_df.plot.scatter(x=\"EventID\", y=\"EventCount\", figsize=(15, 4), s=50, c=\"EventCount\", colormap=\"viridis\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
